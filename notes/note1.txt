----------------------------------------------------------------------
It is good to create a virutal env in each project to bring more focus to packages installed speceficly for
a specefic project you are working on
To create a virtual enviroment, go to the folder of the project
then open it in git bash and type
    python -m venv env <-this is the name you chose for virtual enviroment
to activate the virtual enviroment
source env/Scripts/activate

to leave the virtual enviroment you simply write
    deactivate

and the cool thing is that when you write pip freeze to check the packages installed
after you activate ve
    you will see no packages
----------------------------------------------------------------------
 django-admin startproject TeddyTrader .
    the . will not allow django to create multiple folders like TeddyTrader then TeddyTrader
    - a bit more professioanl
now you run py manage.py runserver
----------------------------------------------------------------------
python manage.py startapp pages <--- to build an app
----------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
did this in my settings.py, the course lessons were a bit different than this
but this solution works too
----------------------------------------------------------------------
Now we should setup a git for our project
just use git stpes after you create repo

everytime you want to add what you made here to your git
git add -A
git commit -m "message"
git push origin master

so also create a .gitignore so you dont push videos images because they take too much storage
and go to gitignore.io and type Django, you know the rest
----------------------------------------------------------------------
{% comment %} We did our entire html in splits for cleaner code {% endcomment %}
    {% include 'shared/header.html'%} 
    {% include 'shared/navbar.html'%} 
    {% block content %} {% endblock %} 
    {% include 'shared/footer.html' %}
----------------------------------------------------------------------
when you want to create a super user in git bash
first migration and migreate

but since it is gitbash your command should ber
winpty python manage.py createsuperuser
teddytrader_faraz_is_super__user
TeddysAreDopeAndFun@19991234
----------------------------------------------------------------------
in our models whenever we work with img fields, we must use package pillow
so install pip install pillow
----------------------------------------------------------------------
One thing we'll learn here is that we will be customizing our django admin
for our team so they would have an amazing user experience as well

ALL THE NOTES WILL GO HERE

from django.contrib import admin
from .models import Team
from django.utils.html import format_html

# CUSTOMIZE ADMIN PAGE FOR TEAM CLASS


class TeamAdmin(admin.ModelAdmin):

    list_display = ('id', 'thumbnail', 'first_name', 'last_name',
                    'designation', 'created_date')
    # this tuple's job is to ask us what fields we want to display in Django Admin for Team

    # only the id is clickable so we want also first-name to be clickable as well
    list_display_links = ('id', 'thumbnail', 'first_name',)  # , is required

    search_fields = ('first_name', 'last_name', 'id', 'designation',)
    # brings a search field for your django and those values in tuple are about
    # by what fields you want to search for the users

    list_filter = ('designation',) #Get data by designations. Filter box

    # to be able to also bring photos in display to admin, we have to use html tags as well
    # from django.utils.html import format_html

    def thumbnail(self, object):
        return format_html(f'<img src="{object.profile_picture.url}" width="40" style="border-radius: 50%"/>')

    thumbnail.short_description = 'Profile Picture'


admin.site.register(Team, TeamAdmin)
----------------------------------------------------------------------
Lets make some stuff dynamic
in our footer
<p class="copy">
              © {% now 'Y'%} <a href="#">Carzone Corp.</a> All Rights Reserved.
            </p>
we made year with django now 'Y' to change year every year automatically

----------------------------------------------------------------------
DYNAMIC HIGHLIGHT. It will keep the link highlighet till we leave that page
          <li class="nav-item">
            <a 
            {% if '/' == request.path %}
              class="nav-link active"
            {%else%}
              class="nav-link"
            {% endif %}
            href="{% url 'pages:home' %}">
              Home
            </a>
          </li>
I did it for all other links. Located in shared/navbar.html
----------------------------------------------------------------------
Now we are going to create an APp for our TeddyBear FUNCTIONALITTY
----------------------------------------------------------------------
We are going to do 2 things. 
First implemnent a rich text editor for description for Teddy TeddyBear
Second To allow the features option to choose mulutple features from the given
Featuers

for editor
we install pip install django-ckeditor
Then SETTINGS.py, INSTALLED_APPS -> ADD 'ckeditor'
Then models we switched our TextField to RichTextField in description 
and imported 
from ckeditor.fields import RichTextField
Then you write
description = RichTextField(blank=False)

Now to use multi Featuers
pip install django-multiselectfield
you have to impoirt a package called
from multiselectfield import MultiSelectField
----------------------------------------------------------------------
Ok for better admin experience, we want to make the is_featured editable when
we display all databases
    list_editable = ('is_featued') in admin.py
----------------------------------------------------------------------
We want our numbers to be a bit better readible therefore we want to use
a djangoo package called humanize
django.contrib.humanize

Add this to INSTALLED_APPS -> 'django.contrib.humanize'
once it is done, we go to html page and were we want our particialr number to be shown
<span>${{teddybear.price | intcomma}}</span>
we also {% extends 'base.html' %} {% block title %}Home Page{% endblock title %}
{% block content %} {% load humanize %}{% load static %} load humanize on that specfic html page
it will turn $43000.00 to $43,000.00
----------------------------------------------------------------------
from django.core.paginator import EmptyPage, PageNotAnInteger, Paginator

Pagination stpes
def home(req):
    teddybear_data = TeddyBear.objects.order_by('-created_date')
    paginator = Paginator(teddybear_data, 6) #1
    page = req.GET.get('page') #2
    paged_teddy_bears = paginator.get_page(page) #3
    
    
    context = {
        'TeddyBear': paged_teddy_bears 
          #4.passnig paged instead of original data
        
    }
    return render(req, 'teddyBears/teddyBears.html', context)
first we make paginator and put our data and how many data
we want to show per Pagination
then req.GET.get('page') retrieves the value of the page
 parameter from the query string. This 
parameter is usually used to specify the 
page number of a paginated view.

paginator.get_page(page) retrieves the page number 
from the query string (retrieved in the first step), 
and returns a Page object representing that page of data.

 <!-- Page navigation start -->
        <div class="pagination-box p-box-2 text-center">
          <nav aria-label="Page navigation example">
            {% if TeddyBear.has_other_pages %}
            <ul class="pagination">
              {% if TeddyBear.has_previous %}
              <li class="page-item">
                <a
                  class="page-link"
                  href="?page={{TeddyBear.previous_page_number}}"
                  ><i class="fa fa-angle-left"></i
                ></a>
              </li>
              {%else%}
              <li class="page-item disabled">
                <a class="page-link"><i class="fa fa-angle-left"></i></a>
              </li>
              {% endif %} 
              {%for i in TeddyBear.paginator.page_range%} 
              {%if TeddyBear.number == i%}
              <li class="page-item">
                <a class="page-link active" href="page={{i}}">{{i}}</a>
              </li>
              {%else%}
              <li class="page-item">
                <a class="page-link" href="?page={{i}}">{{i}}</a>
              </li>
              {%endif%} 
              {%endfor%}
              {% if TeddyBear.has_next %}
              <li class="page-item">
                <a
                  class="page-link"
                  href="?page={{TeddyBear.next_page_number}}"
                  ><i class="fa fa-angle-right"></i
                ></a>
              </li>
              {%else%}
              <li class="page-item disabled">
                <a class="page-link"><i class="fa fa-angle-right"></i></a>
              </li>
              {% endif %} 
            </ul>
            {% endif %}
          </nav>
        </div>
----------------------------------------------------------------------
NOW WE WILL WORK ON SEARCH FUNCTIONALITTY
First make url

<div id="full-page-search">
  <button type="button" class="close">×</button>
  <form action="{% url 'teddyBears:search' %}" class="search-header">
      <input type="search" value="" placeholder="type keyword(s) here. Eg: audi, benz etc" name="keyword"/>
      <button type="submit" class="btn btn-sm button-theme">Search</button>
  </form>
</div>

we add the name to input so whatever the users searches will be Typed
for example user tpes hi. 
http://127.0.0.1:8000/teddy-bears/search/?keyword=hi

def search(req):
    teddybear_data = TeddyBear.objects.order_by('-created_date')

    if 'keyword' in req.GET:  # if we have a keyword name in url
        # we store keyword's given valuye in keyword variable
        keyword = req.GET['keyword']
        if keyword:
            teddybear_data = teddybear_data.filter(
                description__icontains=keyword)

    context = {
        'TeddyBear': teddybear_data
    }

    return render(req, 'teddyBears/search.html', context)
----------------------------------------------------------------------
FOR OUR SEARCH BOX IN MAIN Home
We want our options to be avalible based on waht is already stored in our database

from pages app
def home(req):
    team_data = Team.objects.all()
    teddy_bear_data = TeddyBear.objects.all()
    featured_teddy_bears = TeddyBear.objects.order_by(
        '-created_date').filter(is_featured=True)

    # --search box field looks for those values and passes them to html
    brand_search = TeddyBear.objects.values_list(
        'brand', flat=True).distinct().order_by('brand')
    year_search = TeddyBear.objects.values_list(
        'year', flat=True).distinct().order_by('year')
    condition_search = TeddyBear.objects.values_list(
        'condition', flat=True).distinct().order_by('condition')
    tag_search = TeddyBear.objects.values_list(
        'tag', flat=True).distinct().order_by('tag')
    context = {
        'Team': team_data,
        'TeddyBear': teddy_bear_data,
        'Featured': featured_teddy_bears,
        'brand_search': brand_search,
        'year_search': year_search,
        'condition_search': condition_search,
        'tag_search': tag_search,
    }
    return render(req, 'pages/home.html', context)
why each topic has its own _search
  it is because if 2 items in database have the same like city or brand, that wouldn't be shown twice in options here

Now that only works with SEARCHING BY TYPING
BUT WHAT IF WE ALSO WOULD LIKE TO SEARCH BASED ON GIVEN options

html
<div class="form-group">
          <select class="form-control search-fields" name="brand"> <-------------
            <option selected="true" disabled="disabled">Brand</option>
            {% for brand in brand_search %}
            <option value="{{brand}}">{{brand}}</option>
            {% endfor %}
          </select>
        </div>

teddyBears.py
def search(req):
    teddybear_data = TeddyBear.objects.order_by('-created_date')

    if 'keyword' in req.GET:  # if we have a keyword name in url
        # we store keyword's given valuye in keyword variable
        keyword = req.GET['keyword']
        if keyword:
            teddybear_data = teddybear_data.filter(
                description__icontains=keyword)

    if 'brand' in req.GET:  # if we have a keyword name in url  <--------------
        # we store keyword's given valuye in keyword variable 
        brand = req.GET['brand']
        if brand:
            teddybear_data = teddybear_data.filter(
                brand__iexact=brand)  # checking it for exact value instead of looking for similar in description

    if 'year' in req.GET:  # if we have a keyword name in url
        # we store keyword's given valuye in keyword variable
        year = req.GET['year']
        if year:
            teddybear_data = teddybear_data.filter(
                year__iexact=year)  # checking it for exact value instead of looking for similar in description

    if 'condition' in req.GET:  # if we have a keyword name in url
        # we store keyword's given valuye in keyword variable
        condition = req.GET['condition']
        if condition:
            teddybear_data = teddybear_data.filter(
                condition__iexact=condition)  # checking it for exact value instead of looking for similar in description

    if 'tag' in req.GET:  # if we have a keyword name in url
        # we store keyword's given valuye in keyword variable
        tag = req.GET['tag']
        if tag:
            teddybear_data = teddybear_data.filter(
                tag__iexact=tag)  # checking it for exact value instead of looking for similar in description

    if 'min_price' in req.GET:
        min_price = req.GET['min_price']
        max_price = req.GET['max_price']
        if max_price:
            teddybear_data = teddybear_data.filter(
                price__gte=min_price, price__lte=max_price)
            # this means price is >= minimum price and <= maximum price

    context = {
        'TeddyBear': teddybear_data
    }

    return render(req, 'teddyBears/search.html', context)
----------------------------------------------------------------------
CUSTOMIZE ADMIN PAGE CHANGE COLOR

Create folder in template -> admin
name must be base_site.html in that folder
